{"version":3,"sources":["../lib/nodemailer.spec.es6"],"names":["validConfig","invalidConfig","validMailOption","invalidMailOption","describe","nodemailer","before","after","it","to","have","property","createNodemailer","throw","Error","transporter","send","then","sendMail","called","be","true"],"mappings":"AAAA;;AAEA;;AACA;;AACA;;AAEA,IAAMA,cAAc;AAChB,UAAQ,SADQ;AAEhB,UAAQ,GAFQ;AAGhB,YAAU,IAHM;AAIhB,UAAQ;AACN,YAAQ,UADF;AAEN,YAAQ;AAFF;AAJQ,CAApB;AAAA,IASEC,gBAAgB;AACd,SAAO;AADO,CATlB;AAAA,IAYEC,kBAAkB;AAChB,QAAM,QADU;AAEhB,UAAQ;AAFQ,CAZpB;AAAA,IAgBEC,oBAAoB;AAClB,SAAO;AADW,CAhBtB;;AAoBAC,SAAS,wBAAT,EAAmC,YAAM;;AAEvCA,WAAS,yBAAT,EAAoC,YAAM;;AAExCA,aAAS,0CAAT,EAAqD,YAAM;;AAEzD,UAAIC,mBAAJ;;AAEAC,aAAO,YAAM;AACXD,qBAAa,2BAAeL,WAAf,CAAb;AACD,OAFD;;AAIAO,YAAM,YAAM;AACVF,qBAAa,IAAb;AACD,OAFD;;AAIAG,SAAG,4CAAH,EAAiD,YAAM;AACrD,0BAAOH,UAAP,EAAmBI,EAAnB,CAAsBC,IAAtB,CAA2BC,QAA3B,CAAoC,QAApC;AACD,OAFD;;AAIAH,SAAG,iDAAH,EAAsD,YAAM;AAC1D,0BAAOH,UAAP,EAAmBI,EAAnB,CAAsBC,IAAtB,CAA2BC,QAA3B,CAAoC,aAApC;AACD,OAFD;;AAIAH,SAAG,wDAAH,EAA6D,YAAM;AACjE,0BAAOH,UAAP,EAAmBI,EAAnB,CAAsBC,IAAtB,CAA2BC,QAA3B,CAAoC,kBAApC;AACD,OAFD;;AAIAH,SAAG,4CAAH,EAAiD,YAAM;AACrD,0BAAOH,UAAP,EAAmBI,EAAnB,CAAsBC,IAAtB,CAA2BC,QAA3B,CAAoC,MAApC;AACD,OAFD;AAGD,KA3BD;;AA6BAP,aAAS,4CAAT,EAAuD,YAAM;;AAE3DI,SAAG,uBAAH,EAA4B,YAAM;;AAEhC,iBAASI,gBAAT,GAA4B;AAC1B,iBAAO,2BAAeX,aAAf,CAAP;AACD;;AAED,0BAAOW,gBAAP,EAAyBH,EAAzB,CAA4BI,KAA5B,CAAkCC,KAAlC;AACD,OAPD;AAQD,KAVD;AAWD,GA1CD;;AA4CAV,WAAS,8BAAT,EAAyC,YAAM;;AAE7CA,aAAS,kCAAT,EAA6C,YAAM;;AAEjD,UAAIC,mBAAJ;;AAEAC,aAAO,YAAM;AACXD,qBAAa,2BAAeL,WAAf,CAAb;AACAK,mBAAWU,WAAX,GAAyB;AACvB,sBAAY;AADW,SAAzB;AAGD,OALD;;AAOAR,YAAM,YAAM;AACVF,qBAAa,IAAb;AACD,OAFD;;AAIAG,SAAG,4CAAH,EAAiD,YAAM;AACrDH,mBAAWW,IAAX,CAAgBd,eAAhB,EACGe,IADH,CACQ,YAAM;AACV,4BAAOZ,WAAWU,WAAX,CAAuBG,QAAvB,CAAgCC,MAAvC,EAA+CV,EAA/C,CAAkDW,EAAlD,CAAqDC,IAArD;AACD,SAHH;AAID,OALD;AAMD,KArBD;;AAuBAjB,aAAS,oCAAT,EAA+C,YAAM;;AAEnD,UAAIC,mBAAJ;;AAEAC,aAAO,YAAM;AACXD,qBAAa,2BAAeL,WAAf,CAAb;AACD,OAFD;;AAIAO,YAAM,YAAM;AACVF,qBAAa,IAAb;AACD,OAFD;;AAIAG,SAAG,uBAAH,EAA4B,YAAM;AAChC,0BAAO,YAAM;AACXH,qBAAWW,IAAX,CAAgBb,iBAAhB;AACD,SAFD,EAEGM,EAFH,CAEMI,KAFN,CAEYC,KAFZ;AAGD,OAJD;AAKD,KAjBD;AAkBD,GA3CD;AA4CD,CA1FD","file":"nodemailer.spec.js","sourcesContent":["\"use strict\";\n\nimport {expect} from \"chai\";\nimport {spy} from \"sinon\";\nimport {Nodemailer} from \"../../dist/nodemailer\";\n\nconst validConfig = {\n    \"host\": \"abc.com\",\n    \"port\": 111,\n    \"secure\": true,\n    \"auth\": {\n      \"user\": \"testUser\",\n      \"pass\": \"testPwd\"\n    }\n  },\n  invalidConfig = {\n    \"foo\": \"bar\"\n  },\n  validMailOption = {\n    \"to\": \"sender\",\n    \"from\": \"recipient\"\n  },\n  invalidMailOption = {\n    \"foo\": \"bar\"\n  };\n\ndescribe(\"Nodemailer Tests ===> \", () => {\n\n  describe(\"The Nodemailer Instance\", () => {\n\n    describe(\"when it's been created with valid config\", () => {\n\n      let nodemailer;\n\n      before(() => {\n        nodemailer = new Nodemailer(validConfig);\n      });\n\n      after(() => {\n        nodemailer = null;\n      });\n\n      it(\"should have a member referencing to config\", () => {\n        expect(nodemailer).to.have.property(\"config\");\n      });\n\n      it(\"should have a member referencing to transporter\", () => {\n        expect(nodemailer).to.have.property(\"transporter\");\n      });\n\n      it(\"should have a method referencing to _createTransport()\", () => {\n        expect(nodemailer).to.have.property(\"_createTransport\");\n      });\n\n      it(\"should have a method referencing to send()\", () => {\n        expect(nodemailer).to.have.property(\"send\");\n      });\n    });\n\n    describe(\"when it's been created with invalid config\", () => {\n\n      it(\"should throw an error\", () => {\n\n        function createNodemailer() {\n          return new Nodemailer(invalidConfig);\n        }\n\n        expect(createNodemailer).to.throw(Error);\n      });\n    });\n  });\n\n  describe(\"when send() method is called\", () => {\n\n    describe(\"when called with valid arguments\", () => {\n\n      let nodemailer;\n\n      before(() => {\n        nodemailer = new Nodemailer(validConfig);\n        nodemailer.transporter = {\n          \"sendMail\": spy()\n        };\n      });\n\n      after(() => {\n        nodemailer = null;\n      });\n\n      it(\"should call sendMail() method successfully\", () => {\n        nodemailer.send(validMailOption)\n          .then(() => {\n            expect(nodemailer.transporter.sendMail.called).to.be.true;\n          });\n      });\n    });\n\n    describe(\"when called with invalid arguments\", () => {\n\n      let nodemailer;\n\n      before(() => {\n        nodemailer = new Nodemailer(validConfig);\n      });\n\n      after(() => {\n        nodemailer = null;\n      });\n\n      it(\"should throw an error\", () => {\n        expect(() => {\n          nodemailer.send(invalidMailOption);\n        }).to.throw(Error);\n      });\n    });\n  });\n});\n"]}